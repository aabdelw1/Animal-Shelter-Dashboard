{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex: 1;\\n  min-height: 70vh;\\n  max-height: 70vh;\\n\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport { toaster } from 'evergreen-ui';\nimport { Query } from 'react-apollo';\nimport { Context } from './Context';\nimport AnimalDashboardColumn from './AnimalDashboardColumn';\nimport Queries from '../graphql/queries';\nimport { useQuery } from '@apollo/react-hooks';\nvar Categories = ['Animals ', 'Breeds', 'Vaccines'];\nvar SchedulerContainer = styled.div(_templateObject());\n\nvar AnimalDashboard = function AnimalDashboard(props) {\n  var setScheduleButton = props.setScheduleButton;\n\n  var _useContext = useContext(Context),\n      setSmes = _useContext[3];\n\n  var targetUrl = 'http://localhost:4000/animals';\n  fetch(targetUrl, {\n    method: 'get'\n  }).then(function (res) {\n    return res.json();\n  }).then(function (json) {\n    return console.log(json);\n  }); // const { loading, error, data } = useQuery(Queries.ALL_ANIMALS)\n  // if (data) {\n  //   data.map((animal, index) => {\n  //     console.log(animal)\n  //   })\n  // }\n  // var proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n  // var targetUrl = 'http://localhost:4000/animals'\n  // fetch(targetUrl)\n  //   .then(res => {\n  //     res.json()\n  //     console.log(blob)\n  //   })\n  //   .then(data => {\n  //     console.table(data)\n  //     document.querySelector('pre').innerHTML = JSON.stringify(data, null, 2)\n  //     return data\n  //   })\n  //   .catch(e => {\n  //     console.log(e)\n  //     return e\n  //   })\n\n  return __jsx(SchedulerContainer, null, __jsx(Query, {\n    query: Queries.ALL_ANIMALS\n  }, function (_ref) {\n    var data = _ref.data,\n        error = _ref.error,\n        loading = _ref.loading;\n\n    if (error) {\n      toaster.danger('Something went wrong when fetching the Animals', {\n        id: 'animalDashboard',\n        description: 'Check your network connection or try again later.'\n      });\n    }\n\n    return Categories.map(function (role, index) {\n      return __jsx(AnimalDashboardColumn, {\n        key: index,\n        columnIndex: index,\n        stage: role,\n        data: data && data.filter(function (c) {\n          return c.role === role;\n        }),\n        error: error,\n        loading: loading\n      });\n    });\n  }));\n};\n\nexport default AnimalDashboard;","map":null,"metadata":{},"sourceType":"module"}